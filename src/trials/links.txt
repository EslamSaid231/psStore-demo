      <li>
        <Link to="/games/action">Action</Link>
      </li>
      <li>
        <Link to="/games/adventure">Adventure</Link>
      </li>
      <li>
        <Link to="/games/rpg">RPG</Link>
      </li>
      <li>
        <Link to="/games/puzzle">Puzzle</Link>
      </li>
      <li>
        <Link to="/games/shooter">Shooter</Link>
      </li>
      <li>
        <Link to="/games/indie">Indie</Link>
      </li>
      <li>
        <Link to="/games/platformer">Platformer</Link>
      </li>
      <li>
        <Link to="/games/multiplayer">Multiplayer</Link>
      </li>




    // let newElt = Object.assign({}, element);
    // console.log(newElt);
    // return setGameType({ ...gameType, game: newElt });
// for (let i = 0; i < genres.length; i++) {
//   for (let j = 0; j < genres[i].length; j++) {
//     let gen = genres[i][j].name;
//     console.log(genres);
//     array.push(gen);
//   }
// }

      // games.filter((game) =>
//   game.genres.some((sub) => sub.name.toLowerCase() === genre)
// );

// .forEach((element) => {
//   setGameType((prevState) => {
//     const updatedGames = [...prevState];
//     updatedGames.unshift({ element: element, id: element.id });
//     return updatedGames;
//   });
// });
// let newElt = Object.assign({}, element);
// console.log(newElt);
// return setGameType({ ...gameType, game: newElt });
// const data = await fetch(
//   `https://api.rawg.io/api/genres?key=a213d0a5f1704bdd90578d505acfd0f1`
// ).then((response) => response.json());
// const filterId = data.results
//   .filter((Gen) => {
//     return Gen.name.toLowerCase().includes(genre.toLowerCase());
//   })
//   .map((game) => game.games.map((subId) => subId.id.toString()));



    const identifier = setTimeout(() => {
      for (let i = 0; i < platImages.length; i++) {
        let pName = platImages[i].name;
        let { image } = platImages[i];

        for (let j = 0; j < platforms.length; j++) {
          if (platforms[j] === pName) {
            const img = new Object();
            img.id = Math.random();
            img.payload = image;
            return arr.push(img);
          }
        }
      }
    });
    return clearTimeout(identifier);


    useReducer Login method

        const identifier = setTimeout(() => {
      setFormIsValid(emailIsValid && passwordIsValid);
    }, 500);
    return () => {
      clearTimeout(identifier);
    };
  }, [emailIsValid, passwordIsValid]);
  const emailChangeHandler = (e) => {
    dispatchEmail({ type: "USER_INPUT", val: e.target.value });
  };
  const passwordChangeHandler = (e) => {
    dispatchPassword({ type: "USER_INPUT", val: e.target.value });
  };
  const validateEmailHandler = () => {
    dispatchEmail({ type: "INPUT_BLUR" });
  };
  const validatePasswordHandler = () => {
    dispatchPassword({ type: "INPUT_BLUR" });
  };
  const submitHandler = async (e) => {
    e.preventDefault();
    try {
      if (formIsValid) {
        await authCtx.onLogin(emailState.value, passwordState.value);
        navigate("home");
      }
    } catch (error) {
      console.log(error);
    }